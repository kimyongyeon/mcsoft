각 페이지에서 공통으로 사용되는 파일은 \assets\www\docs\lib\js 디렉토리에 담겨있습니다. (총 10개의 파일)


중요 라이브러리
common.js :: 서버와의 통신에 사용되는 URL 정보를 가지고 있으며, 실제로 서버와의 통신에 사용되는 모듈을 가지고 있습니다.
pcs.html.js :: jquery 기반으로한 페이지 네비게이션의 모듈을 담고 있으며, 사용자의 로그인정보를 저장하며 로그인 정보를 가져오는 모듈을 담고 있습니다.
pcs.list.js :: 게시판의 목록을 생성하는 역활을 담당하는 모듈을 담고 있습니다.

위 3개의 파일은 jquery 파일 이외에 별도로 작성된 파일이며, 페이지 전역에서 사용되는 중요한 파일입니다.
수정되면 모든개발자가 같은 내용을 공유할 수 있도록 관리가 되어야합니다.
개발시 수정을 하게되는 경우가 반드시 생길것이며 수정을 해도 무방합니다. (10개의 파일 모두)

client script 적용방법 

공통으로 사용되는 리소스는 하나의 파일에 가지고 있습니다. - header.js
해당 리소스를 각 html 파일의 상단에 등록해주어야합니다.
각 페이지는 고유한 아이디를 가지고 있어야합니다.
각 페이지의 고유한 아이디는 html body 태그 하위의 첫번째 div 태그에 등록하는것을 권장합니다.

Ex )
<!DOCTYPE html>
<html>
<head>
	<title>성공노트 이용약관</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">  
	<script src="../../lib/js/header.js" type="text/javascript"></script>      
</head>
<body class="bg_dot">

	<div data-role="page"  id="main_menu_page">
</body>
</html>

각 페이지는 해당 페이지의 비즈니스 로직을 담당하는 스크립트 파일을 하나씩 생성하는것을 권장합니다.
비즈니스 로직을 담당하는 스크립트 파일은 첫번째 div 태그가 끝나기 직전에 등록하는것을 권장합니다.

Ex )
<!DOCTYPE html>
<html>
<head>
	<title>성공노트 이용약관</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">  
	<script src="../../lib/js/header.js" type="text/javascript"></script>      
</head>
<body class="bg_dot">

	<div data-role="page"  id="private_login_page">
		<!-- content -->
		<div class="login">
			<h1><span class="hidden">성공노트 나를 변화시키는 힘</span></h1>
			<button type="button" class="btn_pc">PC 키보드 보기</button>
			<div class="login_box">
				<div><input type="text" data-clear-btn="true" placeholder="이메일 아이디" class="_private_login_id"></div>
				<div class="mt5"><input type="password" data-clear-btn="true" placeholder="비밀번호"  class="_private_login_pw"></div>
				<button type="button" class="_private_login btn1">로그인</button>
			</div>
			<div class="btn_box">
				<a href="#" class="btn2">비밀번호 찾기</a>
				<a href="#" class="_private_join btn2">회원 가입</a>
			</div>
		</div>
		<p class="copyright"><small>2014 &copy; MC Soft</small></p>
		<!-- /content -->
		
		<script src="app_js/private_login.js"></script>
	</div>

</body>
</html>

##########################################################################################################################################################################

기존에 작성된 비즈니스 로직에 사용된 개체를 가져오는 방법은 id 를 사용하지 않고 class 에 등록하여 작성을 하였습니다.
이유는 id 중복을 허용하지 않기 때문입니다.

Ex )
<!DOCTYPE html>
<html>
<head>
	<title>성공노트 이용약관</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">  
	<script src="../../lib/js/header.js" type="text/javascript"></script>      
</head>
<body class="bg_dot">

	<div data-role="page"  id="private_login_page">
		<!-- content -->
		<div class="login">
			<h1><span class="hidden">성공노트 나를 변화시키는 힘</span></h1>
			<button type="button" class="btn_pc">PC 키보드 보기</button>
			<div class="login_box">
				<div><input type="text" data-clear-btn="true" placeholder="이메일 아이디" class="_private_login_id"></div>
				<div class="mt5"><input type="password" data-clear-btn="true" placeholder="비밀번호"  class="_private_login_pw"></div>
				<button type="button" class="_private_login btn1">로그인</button>
			</div>
			<div class="btn_box">
				<a href="#" class="btn2">비밀번호 찾기</a>
				<a href="#" class="_private_join btn2">회원 가입</a>
			</div>
		</div>
		<p class="copyright"><small>2014 &copy; MC Soft</small></p>
		<!-- /content -->
		
		<script src="app_js/private_login.js"></script>
	</div>

</body>
</html>

위의 소스는 로그인을 담당하는 html 파일이며 아이디 및 패스워드의 value 값을 가져오기위해 class="_private_login_id", class="_private_login_pw" 이렇게 작성하였습니다.
class 명을 언더바(_)를 가장앞에 두고 몇칭을 만들었습니다. ::: _private_login_id , _private_login_pw 
다른 페이지 모두 같음

로그인을 담당하는 private_login.js 파일의 비즈니스로직입니다.

$("#private_login_page").live("pageinit", function() {

    // 페이지 전역 변수 초기화 로그
    var page = {
        "dom" : $(this),
        "id" : $(this).attr("id")
    };

    
    page.model = ( function() {
      
        var pub = {};        
        pub.init = function() {
        };
        return pub;
    }());

    page.view = ( function() {
        
    	// selector 등록
    	var sel = {};
    	sel.privateLogin = $('._private_login', page.dom);
        sel.privatejoin = $('._private_join', page.dom);        
        sel.private_login_id = $('._private_login_id', page.dom);
        sel.private_login_pw = $('._private_login_pw', page.dom);
    	
        var pub = {};        
        
        
        pub.userLogin = function(callback) {
        };
        
        // 로그인 이벤트 바인드
        pub.onClickPrivateLogin = function(callback) {
            sel.privateLogin.bind('click', function() {
                callback();
            });
        };
        // 회원가입 이벤트 바인드
        pub.onClickPrivateJoin = function(callback) {
            sel.privatejoin.bind('click', function() {
                callback();
            });
        };
        
        // title
        pub.getPrivateLoginId = function() {
            return sel.private_login_id.val();
        };
        // writer
        pub.getPrivateLoginPw = function(writer) {
        	return sel.private_login_pw.val();
        }
        
        
        pub.init = function() {
        };
        return pub;
    }());

    page.controller = ( function() {
        var pub = {};

        pub.init = function() {

        	// 삭제하지 마세요.
            page.model.init();
            page.view.init();
            
            
            // 로그인버튼 이벤트 콜
            page.view.onClickPrivateLogin(function() {
                // 서버와의 통신시도
            	var param = {};
                param.user_id = page.view.getPrivateLoginId();
                param.user_pw = page.view.getPrivateLoginPw();
                param.main_cd = common.code.login_office_type;
                param.user_section = "001";
                param.TRCODE = "MCSOFT_SUCCESS_LOGIN";
                
             
                /*var tmpJson = {};
                tmpJson.user_id = "fox7601";
				tmpJson.user_name = "엄진영";
				pcs.html.localStorage.set("login_info", JSON.stringify(tmpJson));
				pcs.html._is_login = true;
				pcs.html.startActivity("../main/main_menu.html");*/
                   
                console.log(JSON.stringify(param) + " <<<<<<< ");
                                                
                var http_str = common.http.doRequestString(param.TRCODE, JSON.stringify(param));
                var http_json = JSON.parse(http_str);
                console.log(tag +"::::  response data - real : " + http_json);
                
                /**
                 * 오브젝트 체크 및 기타 체크 시작 
                 */               
                if($.isPlainObject(http_json)) {
                	if(http_json.result_status === "t") {
                		// 서버에서 받은 데이터가 일단 정상
                		var login_obj = http_json.result_data;
                		
                		if(login_obj != null) {
	                		if(login_obj.user_id !== undefined && login_obj.user_id !== null && param.user_id === login_obj.user_id) {
	                			//alert("로그인 처리중입니다....");
	                			pcs.html.localStorage.set("login_info", JSON.stringify(login_obj));
	                			//alert(pcs.html.localStorage.get("login_info", "user_id")+"님 안녕하세요. 메인페이지로 이동합니다.");
	                			pcs.html._is_login = true;
	                			pcs.html.startActivity("../main/main_menu.html");
	                		} else {
	                			alert("로그인에 실패하였습니다.");
	                			return false;
	                		}
                		} else {
                			alert("로그인에 실패하였습니다.");
                    		return false;
                		}
                	} else {
                		alert("로그인에 실패하였습니다.");
                		return false;
                	}
                	
                } else {
                	alert("로그인에 실패하였습니다.");
                	return false;
                }                
               
            });
            
            // 회원가입버튼 이벤트 콜
            page.view.onClickPrivateJoin(function() {
                pcs.html.startActivity("../private/private_join.html");
            });
            
        };
        return pub;
    }());    
    
    pcs.html.setModel(page.id, page.model);
    pcs.html.setView(page.id, page.view);
    pcs.html.setController(page.id, page.controller);

    // 페이지가 최초로 생성될 때 호출된다.
    // 화면을 초기화 하고, 각종 이벤트 리스너를 등록하는 등의 코드를 작성한다.
    page.dom.bind("onCreate", function() {
        // 초기화 함수 실행    	
        page.controller.init();
        // TODO 코드 작성
    });
    // onCreate() 이벤트가 호출된 이후에 바로 호출된다. 두 번째 파라메터에는 prev 페이지에서 넘겨준
    // 데이터가 저장되어 있다. 전달받은 파라메터를 처리하는 코드를 작성한다.
    page.dom.bind("onStart", function(event, data) {
        // TODO 코드 작성
    });
    // pcs.html.startActivity() 에 의하여 페이지가 이동되기 직전에 호출된다.
    // 페이지를 이동하기 전에 처리해야 할 작업(ex 현재 화면의 데이터를 저장)을 위한 코드를 작성한다.
    page.dom.bind("onStop", function() {
        // TODO 코드 작성
    });
    // next 페이지에서 current 페이지로 복귀했을 때 호출된다.
    // 두 번째 파라메터에는 next 페이지에서 전달한 결과값이 저장되어 있다. next 페이지에서 리턴받은
    // 데이터를 처리하는 코드를 작성한다.
    page.dom.bind("onRestart", function(event, data) {
        // TODO 코드 작성
    	// 로그인 여부를 체크하여 다이얼로그를 띄우고 메인으로 이동한다.
    	if(pcs.html._is_login === true) {
    		//pcs.html.startActivity("../main/main_menu.html");
    	}
    });
    // pcs.html.finish() 에 의하여 페이지가 삭제되기 직전에 호출된다.
    // 페이지가 삭제되기 전에 처리할 작업을 위한 코드를 작성한다.
    page.dom.bind("onDestroy", function() {
        // TODO 코드 작성
    });
});

위의 소스에서 sel.private_login_id = $('._private_login_id', page.dom); 이며 셀렉터에 등록하는 부분입니다. 참고하세요.

############################################################################################################################################################

페이지 이동
페이지의 이동은 pcs.html.startActivity("이동하려는 페이지 주소"); 의 메소드를 사용합니다.
해당 메소드는 이동하려는 주소와 pcs.html.startActivity("이동하려는 페이지 주소", "json오브젝트"); 해당 페이지에서 전달받을 json스트링을 파라미터로 사용합니다.
단순 이동인경우에는 이동하려는 페이지 주소만 작성합니다.
파라미터는 pcs.html 의 _param 에 저장되며 이동한 페이지에서 호출이 가능합니다.

Ex) 
pcs.html.startActivity("../client/client_tab_01.html", param); 

var page = {
        "dom" : $(this),
        "id" : $(this).attr("id"),
        "this_page_data" : {}        
    };
page.this_page_data = pcs.html._param;

#############################################################################################################################################################

위의 소스는 동봉해드리는 successnote 디렉토리를 참고하세요.
로그인 ::: \assets\www\docs\html\private
메인페이지 ::: \assets\www\docs\html\main
고객카드 ::: \assets\www\docs\html\client


#############################################################################################################################################################

테스트 :: 단말기로 테스트를 해도되나 글자 하나 바뀌어도 빌드를 해야하는 번거로움을 피해 chrome 에서 개발하는 방법을 권장합니다.
하이브리드 앱은 html 을 브라우저로 보면서 작업해야하기때문에 반드시 웹접근성 및 웹표준을 최대한 지원하는 브라우저를 사용하는것이 좋습니다.
보통은 chrome 을 사용하며 개발 피씨에 설치가 되어있지 않다면 설치를 권장합니다.
윈도우7 의 경우 작업관리자를 오픈하여 chrome 으로 실행중인 모든 프로세스를 종료합니다.
종료한 후 윈도우의 실행입력란에 chrome.exe --disable-web-security 로 옵션을 주어 실행하십시요.
위의 옵션이 없는경우는 보안관련하여 브라우저가 동작하지 않습니다.
